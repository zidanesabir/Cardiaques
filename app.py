import streamlit as st
import pandas as pd
import numpy as np
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
from PIL import Image
import os
from pathlib import Path
from datetime import datetime
import time

# Get the current directory
current_dir = Path(__file__).parent

# Cr√©ation du dossier assets s'il n'existe pas
assets_dir = current_dir / 'assets'
if not os.path.exists(assets_dir):
    os.makedirs(assets_dir)

# Page configuration
st.set_page_config(
    page_title="Pr√©diction de Maladies Cardiaques",
    page_icon="‚ù§Ô∏è",
    layout="wide"
)

# Custom CSS am√©lior√©
st.markdown("""
<style>
main {
    padding: 2rem;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
}
.stButton > button {
    background-color: #ff4b4b;
    color: white;
    font-weight: bold;
    padding: 0.75rem 2.5rem;
    transition: all 0.3s ease;
    border-radius: 8px;
    border: none;
    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
.stButton > button:hover {
    background-color: #ff6b6b;
    transform: translateY(-2px);
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}
.stDataFrame {
    background-color: white;
    border-radius: 10px;
    box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    padding: 1rem;
}
.patient-info {
    background-color: #f8f9fa;
    padding: 1.5rem;
    border-radius: 12px;
    margin-bottom: 1.5rem;
    box-shadow: 0 2px 6px rgba(0,0,0,0.05);
    border: 1px solid #e9ecef;
}
.risk-gauge {
    margin: 2.5rem 0;
    padding: 1rem;
    background-color: white;
    border-radius: 10px;
    box-shadow: 0 2px 6px rgba(0,0,0,0.05);
}
.header-container {
    display: flex;
    align-items: center;
    margin-bottom: 2rem;
    padding: 1rem;
    background-color: white;
    border-radius: 10px;
    box-shadow: 0 2px 6px rgba(0,0,0,0.05);
}
.stMarkdown {
    font-size: 1.1rem;
    line-height: 1.6;
}
h1, h2, h3 {
    color: #2c3e50;
    margin-bottom: 1rem;
}
.sidebar .sidebar-content {
    background-color: #f8f9fa;
    padding: 1.5rem;
}
</style>
""", unsafe_allow_html=True)

# Header avec titre simple
st.markdown("""
    <div class="header-container">
        <h1 class="app-title"><span style="font-family: sans-serif;">&#x2764;&#xFE0F;</span> Pr√©diction de Maladies Cardiaques</h1>
    </div>
""", unsafe_allow_html=True)

# Introduction
st.write('''
## Bienvenue dans l'application de pr√©diction de maladies cardiaques

Cette application utilise un mod√®le d'apprentissage automatique pour pr√©dire 
si un patient est susceptible d'avoir une maladie cardiaque en fonction de ses donn√©es m√©dicales.
Remplissez les informations du patient dans le panneau lat√©ral et cliquez sur "Pr√©dire" pour obtenir une √©valuation du risque.
''')

# S√©parateur
st.markdown("<hr>", unsafe_allow_html=True)

# Chargement du mod√®le et du scaler
@st.cache_resource
def load_model():
    try:
        model = joblib.load(current_dir / 'heart_disease_model.pkl')
        scaler = joblib.load(current_dir / 'scaler.pkl')
        return model, scaler
    except Exception as e:
        st.error(f"Erreur lors du chargement du mod√®le: {str(e)}")
        st.info("V√©rifiez que les fichiers 'heart_disease_model.pkl' et 'scaler.pkl' sont pr√©sents dans le m√™me dossier que l'application.")
        return None, None

try:
    model, scaler = load_model()
    model_loaded = model is not None and scaler is not None
except Exception as e:
    st.error(f"Erreur: {str(e)}")
    model_loaded = False

# Fonction de pr√©diction am√©lior√©e avec gestion d'erreurs
def predict_heart_disease(features):
    if not model_loaded:
        st.error("Le mod√®le n'a pas √©t√© charg√© correctement. Impossible de faire une pr√©diction.")
        return None, None
        
    try:
        feature_names = ['age', 'sex', 'cp', 'trestbps', 'chol', 'fbs', 'restecg', 
                        'thalach', 'exang', 'oldpeak', 'slope', 'ca', 'thal']
        features_df = pd.DataFrame([features], columns=feature_names)
        features_scaled = scaler.transform(features_df)
        prediction = model.predict(features_scaled)
        probability = model.predict_proba(features_scaled)[0][1]
        return prediction[0], probability
    except Exception as e:
        st.error(f"Erreur lors de la pr√©diction: {str(e)}")
        st.info("V√©rifiez que les donn√©es saisies sont valides.")
        return None, None

# Sidebar avec ic√¥ne
st.sidebar.markdown("# üë®‚Äç‚öïÔ∏è Donn√©es du patient")
st.sidebar.markdown("Veuillez remplir les informations suivantes:")

# Collecte des donn√©es du patient avec explications
with st.sidebar.expander("‚ÑπÔ∏è Guide des param√®tres", expanded=False):
    st.markdown("""
    - **√Çge**: √Çge du patient en ann√©es
    - **Sexe**: Genre du patient
    - **Type de douleur thoracique**: Le type de douleur ressentie par le patient
    - **Tension art√©rielle**: Pression art√©rielle en mm Hg
    - **Cholest√©rol**: Taux de cholest√©rol dans le sang en mg/dl
    - **Glyc√©mie √† jeun**: Si la glyc√©mie √† jeun est > 120 mg/dl
    - **ECG au repos**: R√©sultats √©lectrocardiographiques au repos
    - **Fr√©quence cardiaque max**: Fr√©quence cardiaque maximale atteinte
    - **Angine induite par exercice**: Si l'exercice induit une angine de poitrine
    - **D√©pression ST**: D√©pression du segment ST induite par l'exercice
    - **Pente segment ST**: Pente du segment ST pendant l'exercice
    - **Nombre de vaisseaux**: Nombre de vaisseaux principaux color√©s par fluoroscopie
    - **Thalass√©mie**: Type de thalass√©mie
    """)

# Collecte des donn√©es du patient
age = st.sidebar.slider('üî¢ √Çge', 18, 100, 50, help="√Çge du patient en ann√©es")
sex = st.sidebar.selectbox('üë• Sexe', ['Homme', 'Femme'], help="Genre du patient")
sex = 1 if sex == 'Homme' else 0

cp = st.sidebar.selectbox('üíî Type de douleur thoracique', 
                        ['Angine typique', 'Angine atypique', 'Douleur non-angineuse', 'Asymptomatique'],
                        help="Le type de douleur thoracique ressenti par le patient")
cp_dict = {'Angine typique': 0, 'Angine atypique': 1, 'Douleur non-angineuse': 2, 'Asymptomatique': 3}
cp = cp_dict[cp]

trestbps = st.sidebar.slider('ü©∫ Tension art√©rielle au repos (mm Hg)', 80, 220, 120, 
                           help="Pression art√©rielle au repos en mm Hg")
chol = st.sidebar.slider('üî¨ Cholest√©rol s√©rique (mg/dl)', 100, 600, 200, 
                       help="Cholest√©rol s√©rique en mg/dl")

fbs = st.sidebar.selectbox('ü©∏ Glyc√©mie √† jeun > 120 mg/dl', ['Non', 'Oui'], 
                         help="Si la glyc√©mie √† jeun est sup√©rieure √† 120 mg/dl")
fbs = 1 if fbs == 'Oui' else 0

restecg = st.sidebar.selectbox('üìà R√©sultats ECG au repos', 
                             ['Normal', 'Anomalie de l\'onde ST-T', 'Hypertrophie ventriculaire gauche'],
                             help="R√©sultats √©lectrocardiographiques au repos")
restecg_dict = {'Normal': 0, 'Anomalie de l\'onde ST-T': 1, 'Hypertrophie ventriculaire gauche': 2}
restecg = restecg_dict[restecg]

thalach = st.sidebar.slider('üíì Fr√©quence cardiaque maximale', 70, 220, 150, 
                          help="Fr√©quence cardiaque maximale atteinte")

exang = st.sidebar.selectbox('üèÉ Angine induite par l\'exercice', ['Non', 'Oui'], 
                           help="Si l'exercice induit une angine")
exang = 1 if exang == 'Oui' else 0

oldpeak = st.sidebar.slider('üìâ D√©pression ST induite par l\'exercice', 0.0, 6.0, 1.0, 0.1, 
                          help="D√©pression du segment ST induite par l'exercice par rapport au repos")

slope = st.sidebar.selectbox('üìä Pente du segment ST de pointe', 
                           ['Ascendante', 'Plate', 'Descendante'],
                           help="Pente du segment ST pendant l'exercice")
slope_dict = {'Ascendante': 0, 'Plate': 1, 'Descendante': 2}
slope = slope_dict[slope]

ca_options = {
    '0 vaisseau': 0,
    '1 vaisseau': 1,
    '2 vaisseaux': 2,
    '3 vaisseaux': 3
}
ca = st.sidebar.selectbox('ü´Ä Nombre de vaisseaux color√©s', 
                         list(ca_options.keys()),
                         help="Nombre de vaisseaux principaux color√©s par fluoroscopie (0-3)")
ca = ca_options[ca]

thal = st.sidebar.selectbox('üîç Thalass√©mie', ['Normal', 'D√©faut fixe', 'D√©faut r√©versible'], 
                          help="Type de thalass√©mie")
thal_dict = {'Normal': 3, 'D√©faut fixe': 6, 'D√©faut r√©versible': 7}
thal = thal_dict[thal]

# Cr√©ation du vecteur de caract√©ristiques
features = [age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal]

# Affichage des informations du patient avec style
st.header('üìã Informations du patient')
st.markdown('<div class="patient-info">', unsafe_allow_html=True)

# Affichage des donn√©es en colonnes pour une meilleure pr√©sentation
col1, col2 = st.columns(2)

with col1:
    st.subheader("Donn√©es d√©mographiques")
    st.markdown(f"**√Çge:** {age} ans")
    st.markdown(f"**Sexe:** {'Homme' if sex == 1 else 'Femme'}")
    st.markdown(f"**Type de douleur thoracique:** {list(cp_dict.keys())[list(cp_dict.values()).index(cp)]}")
    st.markdown(f"**Tension art√©rielle:** {trestbps} mm Hg")
    st.markdown(f"**Cholest√©rol:** {chol} mg/dl")
    st.markdown(f"**Glyc√©mie √† jeun > 120 mg/dl:** {'Oui' if fbs == 1 else 'Non'}")

with col2:
    st.subheader("Donn√©es cardiaques")
    st.markdown(f"**ECG au repos:** {list(restecg_dict.keys())[list(restecg_dict.values()).index(restecg)]}")
    st.markdown(f"**Fr√©quence cardiaque max:** {thalach}")
    st.markdown(f"**Angine induite par exercice:** {'Oui' if exang == 1 else 'Non'}")
    st.markdown(f"**D√©pression ST:** {oldpeak}")
    st.markdown(f"**Pente segment ST:** {list(slope_dict.keys())[list(slope_dict.values()).index(slope)]}")
    st.markdown(f"**Nombre de vaisseaux color√©s:** {ca}")
    st.markdown(f"**Thalass√©mie:** {list(thal_dict.keys())[list(thal_dict.values()).index(thal)]}")

st.markdown('</div>', unsafe_allow_html=True)

# Tableau complet des donn√©es (collapsible)
with st.expander("Voir toutes les donn√©es en tableau", expanded=False):
    patient_data = pd.DataFrame({
        'Caract√©ristique': ['√Çge', 'Sexe', 'Type de douleur thoracique', 'Tension art√©rielle', 
                        'Cholest√©rol', 'Glyc√©mie √† jeun > 120', 'ECG au repos', 
                        'Fr√©quence cardiaque max', 'Angine induite par exercice', 
                        'D√©pression ST', 'Pente segment ST', 'Nombre de vaisseaux', 'Thalass√©mie'],
        'Valeur': [age, 'Homme' if sex == 1 else 'Femme', 
                list(cp_dict.keys())[list(cp_dict.values()).index(cp)],
                f"{trestbps} mm Hg", f"{chol} mg/dl", 
                'Oui' if fbs == 1 else 'Non',
                list(restecg_dict.keys())[list(restecg_dict.values()).index(restecg)],
                thalach,
                'Oui' if exang == 1 else 'Non',
                oldpeak,
                list(slope_dict.keys())[list(slope_dict.values()).index(slope)],
                ca,
                list(thal_dict.keys())[list(thal_dict.values()).index(thal)]]
    })
    st.dataframe(patient_data, hide_index=True)

# S√©parateur visuel
st.markdown("<hr>", unsafe_allow_html=True)

# Pr√©diction avec animation et am√©lioration visuelle
col_button, _ = st.columns([1, 3])
with col_button:
    predict_button = st.button('üîç le risque', use_container_width=True)

if predict_button:
    if not model_loaded:
        st.error("Impossible de faire une pr√©diction car le mod√®le n'a pas √©t√© charg√© correctement.")
    else:
        with st.spinner('Analyse en cours des donn√©es m√©dicales...'):
            # Simulation d'un d√©lai pour l'animation
            time.sleep(0.5)
            
            prediction, probability = predict_heart_disease(features)
        
        if prediction is not None:
            st.header('üéØ R√©sultat de la pr√©diction')
            
            # Cr√©ation d'une mise en page en colonnes pour le r√©sultat
            result_col1, result_col2 = st.columns([2, 1])
            
            with result_col1:
                if prediction == 1:
                    st.error(f"‚ö†Ô∏è Risque √©lev√© de maladie cardiaque")
                    st.markdown(f"### Probabilit√©: {probability:.2%}")
                    st.markdown("""
                    Un risque √©lev√© sugg√®re qu'une consultation m√©dicale est fortement recommand√©e
                    pour une √©valuation approfondie de la sant√© cardiaque du patient.
                    """)
                else:
                    st.success(f"‚úÖ Faible risque de maladie cardiaque")
                    st.markdown(f"### Probabilit√©: {probability:.2%}")
                    st.markdown("""
                    Un faible risque sugg√®re une bonne sant√© cardiaque selon les param√®tres fournis. 
                    Des contr√¥les r√©guliers restent recommand√©s pour maintenir une bonne sant√© cardiovasculaire.
                    """)
            
            with result_col2:
                if prediction == 1:
                    st.markdown("# ‚ö†Ô∏è")
                else:
                    st.markdown("# ‚úÖ")
            
            # Jauge de risque am√©lior√©e
            st.markdown('<div class="risk-gauge">', unsafe_allow_html=True)
            fig, ax = plt.subplots(figsize=(10, 2))
            ax.barh([0], [100], color='lightgray', height=0.5)
            
            # Couleur gradient bas√©e sur la probabilit√©
            if probability <= 0.25:
                bar_color = 'green'
            elif probability <= 0.5:
                bar_color = 'yellowgreen'
            elif probability <= 0.75:
                bar_color = 'orange'
            else:
                bar_color = 'red'
                
            ax.barh([0], [probability * 100], color=bar_color, height=0.5)
            ax.set_xlim(0, 100)
            ax.set_ylim(-0.5, 0.5)
            ax.set_xlabel('Probabilit√© de maladie cardiaque (%)', fontweight='bold')
            ax.set_yticks([])
            
            # Ajouter des marqueurs de risque
            for i, label in zip([0, 25, 50, 75, 100], ['Tr√®s faible', 'Faible', 'Moyen', '√âlev√©', 'Tr√®s √©lev√©']):
                ax.axvline(i, color='white', linestyle='-', alpha=0.3)
                ax.text(i, -0.25, f'{i}%\n{label}', ha='center', va='center', fontsize=8)
            
            # Ligne de seuil √† 50%
            ax.axvline(50, color='black', linestyle='--', alpha=0.5)
            
            plt.tight_layout()
            st.pyplot(fig)
            st.markdown('</div>', unsafe_allow_html=True)
            
            # Affichage des facteurs de risque si risque √©lev√©
            if prediction == 1:
                st.subheader("Facteurs de risque potentiels:")
                risk_factors = []
                
                if age > 60:
                    risk_factors.append("√Çge √©lev√©")
                if sex == 1:
                    risk_factors.append("Sexe masculin")
                if cp == 0:
                    risk_factors.append("Type de douleur thoracique: Angine typique")
                if trestbps > 140:
                    risk_factors.append("Hypertension art√©rielle")
                if chol > 240:
                    risk_factors.append("Cholest√©rol √©lev√©")
                if fbs == 1:
                    risk_factors.append("Glyc√©mie √† jeun √©lev√©e")
                if exang == 1:
                    risk_factors.append("Angine induite par exercice")
                if oldpeak > 2:
                    risk_factors.append("D√©pression ST significative")
                if thalach < 120:
                    risk_factors.append("Fr√©quence cardiaque maximale basse")
                if ca > 0:
                    risk_factors.append(f"Pr√©sence de {ca} vaisseau(x) color√©(s)")
                
                if risk_factors:
                    for factor in risk_factors:
                        st.markdown(f"- {factor}")
                else:
                    st.markdown("- Aucun facteur de risque sp√©cifique identifi√© dans les param√®tres standards")

# Note importante avec style am√©lior√©
st.markdown("""
<div style='background-color: #f8f9fa; padding: 1.5rem; border-radius: 10px; margin-top: 2rem; border-left: 5px solid #ff4b4b;'>
    <h3>Note importante</h3>
    <p>Cette application est con√ßue comme un outil √©ducatif et d'aide √† la d√©cision.
    Les pr√©dictions sont bas√©es sur un mod√®le statistique et ne constituent pas un diagnostic m√©dical.</p>
    
    Consultez toujours un professionnel de sant√© qualifi√© pour une √©valuation m√©dicale compl√®te.
</div>
""", unsafe_allow_html=True)

# Section expliquant les facteurs de risque g√©n√©raux
with st.expander("üí° En savoir plus sur les facteurs de risque des maladies cardiaques", expanded=False):
    st.markdown("""
    ### Facteurs de risque courants des maladies cardiaques
    
    Les maladies cardiaques sont influenc√©es par divers facteurs, notamment:
    
    - **√Çge**: Le risque augmente avec l'√¢ge
    - **Sexe**: Les hommes pr√©sentent g√©n√©ralement un risque plus √©lev√©
    - **Hypertension art√©rielle**: Une pression sanguine √©lev√©e endommage les art√®res
    - **Cholest√©rol √©lev√©**: Contribue √† la formation de plaques dans les art√®res
    - **Diab√®te**: Augmente significativement le risque de maladie cardiaque
    - **Tabagisme**: Endommage les vaisseaux sanguins et r√©duit l'oxyg√®ne dans le sang
    - **Ob√©sit√©**: Augmente la pression sur le c≈ìur et les vaisseaux
    - **S√©dentarit√©**: Un manque d'exercice contribue √† d'autres facteurs de risque
    - **Ant√©c√©dents familiaux**: La g√©n√©tique joue un r√¥le important
    - **Stress**: Le stress chronique peut affecter la sant√© cardiaque
    
    La pr√©sence de plusieurs facteurs de risque augmente consid√©rablement la probabilit√© de d√©velopper une maladie cardiaque.
    """)

# Footer avec informations et date
st.sidebar.markdown("---")
st.sidebar.info('''
**‚ÑπÔ∏è √Ä propos de cette application**  
Cette application utilise un mod√®le d'apprentissage automatique entra√Æn√© sur 
le dataset UCI Heart Disease pour pr√©dire les risques de maladie cardiaque.

Le mod√®le analyse 13 param√®tres cliniques pour estimer la probabilit√© 
qu'un patient d√©veloppe une maladie cardiaque.
''')

# Affichage de l'auteur avec la date actuelle
current_date = datetime.now().strftime("%d/%m/%Y")
st.sidebar.markdown(f"**R√©alis√© par Zidane Sabir**  \nüóìÔ∏è Date : {current_date}")

# Footer principal
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #777;">
    <p>‚ù§Ô∏è Prendre soin de votre c≈ìur aujourd'hui garantit un avenir plus sain</p>
</div>
""", unsafe_allow_html=True)